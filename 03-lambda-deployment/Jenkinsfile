pipeline {
    agent any

    environment {
        PATH = "/usr/bin:/usr/local/bin:/var/lib/jenkins/.local/bin:${env.PATH}"
        STACK_NAME = "lambda-app"
        REGION = "eu-west-2" // ‚úÖ CORRECT AWS region for London
    }

    stages {
        stage('Setup') {
            steps {
                sh '''
                    echo "üß∞ Checking and Installing Python3 and pip3 if needed..."

                    while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do
                        echo "‚è≥ Waiting for apt lock to release..."
                        sleep 5
                    done

                    command -v python3 >/dev/null || (sudo apt update && sudo apt install -y python3)
                    command -v pip3 >/dev/null || (sudo apt update && sudo apt install -y python3-pip)

                    echo "üì¶ Installing Python test dependencies..."
                    pip3 install --user -r 03-lambda-deployment/lambda-app/tests/requirements.txt
                '''
            }
        }

        stage('Test') {
            steps {
                sh '''
                    echo "üß™ Running unit tests..."
                    pytest 03-lambda-deployment/lambda-app/tests
                '''
            }
        }

        stage('Build') {
            steps {
                sh '''
                    echo "üèóÔ∏è Building Lambda app with AWS SAM..."
                    sam build -t 03-lambda-deployment/lambda-app/template.yaml
                '''
            }
        }

        stage('Clean Previous Stack If Broken') {
            environment {
                AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
            }
            steps {
                sh '''
                    echo "üîç Checking CloudFormation stack state..."

                    STATUS=$(aws cloudformation describe-stacks \
                        --stack-name "$STACK_NAME" \
                        --region "$REGION" \
                        --query 'Stacks[0].StackStatus' \
                        --output text 2>/dev/null || echo "NO_STACK")

                    if [ "$STATUS" = "ROLLBACK_FAILED" ] || [ "$STATUS" = "UPDATE_ROLLBACK_FAILED" ]; then
                        echo "‚ö†Ô∏è Found stack in broken state ($STATUS), deleting..."
                        aws cloudformation delete-stack --stack-name "$STACK_NAME" --region "$REGION"
                        aws cloudformation wait stack-delete-complete --stack-name "$STACK_NAME" --region "$REGION"
                        echo "‚úÖ Stack deleted successfully."
                    else
                        echo "‚úÖ Stack is either fine or not found: $STATUS"
                    fi
                '''
            }
        }

        stage('Deploy') {
            environment {
                AWS_ACCESS_KEY_ID     = credentials('aws-access-key')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
            }
            steps {
                sh '''
                    echo "üöÄ Deploying Lambda app via SAM..."
                    sam deploy \
                        --template-file .aws-sam/build/template.yaml \
                        --stack-name "$STACK_NAME" \
                        --region "$REGION" \
                        --capabilities CAPABILITY_IAM \
                        --no-confirm-changeset \
                        --no-fail-on-empty-changeset
                '''
            }
        }
    }
}
