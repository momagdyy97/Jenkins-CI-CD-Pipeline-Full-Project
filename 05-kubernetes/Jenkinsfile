pipeline {
    agent any

    environment {
        IMAGE_NAME = 'momousa1997/flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
        PATH = "/var/lib/jenkins/.local/bin:$PATH"

        KUBECONFIG = credentials('kubeconfig-credentials-id')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                dir('04-docker') {
                    sh '''
                        echo "[INFO] Upgrading pip and installing requirements..."
                        pip install --user --upgrade pip
                        pip install --user -r requirements.txt
                    '''
                }
            }
        }

        stage('Configure Kubeconfig') {
            steps {
                sh '''
                    echo "[INFO] Verifying KUBECONFIG permissions..."
                    ls -la $KUBECONFIG
                    chmod 600 $KUBECONFIG
                    export KUBECONFIG=$KUBECONFIG
                    kubectl version --client
                '''
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('04-docker') {
                    sh '''
                        echo "[INFO] Running Pytest..."
                        ~/.local/bin/pytest
                    '''
                }
            }
        }

        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        echo "[INFO] Logging into Docker Hub..."
                        echo $PASSWORD | docker login -u $USERNAME --password-stdin
                    '''
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('04-docker') {
                    sh '''
                        echo "[INFO] Building Docker image..."
                        docker build -t $IMAGE_TAG .
                        docker image ls
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                    echo "[INFO] Pushing Docker image to Docker Hub..."
                    docker push $IMAGE_TAG
                '''
            }
        }

        stage('Acceptance Test (k6)') {
            steps {
                script {
                    echo "[INFO] Resolving LoadBalancer endpoint for flask-app-service..."
                    def service = sh(
                        script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}'",
                        returnStdout: true
                    ).trim()
                    echo "ðŸ§ª Service Under Test: ${service}"
                    sh "k6 run -e SERVICE=${service} acceptance-test.js"
                }
            }
        }

        stage('Deploy to PROD') {
            steps {
                sh '''
                    echo "[INFO] Deploying image to PROD cluster..."
                    export KUBECONFIG=$KUBECONFIG
                    kubectl config use-context arn:aws:eks:eu-west-2:568645574857:cluster/prod
                    kubectl config current-context
                    kubectl set image deployment/flask-app flask-app=$IMAGE_TAG
                '''
            }
        }
    }
}
