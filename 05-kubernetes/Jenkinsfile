pipeline {
    agent any

    environment {
        IMAGE_NAME = 'momousa1997/flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
        PATH = "/var/lib/jenkins/.local/bin:$PATH"
        KUBECONFIG = credentials('kubeconfig-credentials-id')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {
        stage('Setup Python Environment') {
            steps {
                dir('04-docker') {
                    sh '''
                        set -e
                        echo "[INFO] Setting up Python environment..."
                        pip install --user --upgrade pip
                        pip install --user -r requirements.txt
                    '''
                }
            }
        }

        stage('Configure Kubeconfig') {
            steps {
                sh '''
                    set -e
                    echo "[INFO] Configuring kubeconfig..."
                    chmod 600 $KUBECONFIG
                    export KUBECONFIG=$KUBECONFIG
                    kubectl version --client
                '''
            }
        }

        stage('Run Unit Tests') {
            steps {
                dir('04-docker') {
                    sh '''
                        set -e
                        echo "[INFO] Running Unit Tests with Pytest..."
                        ~/.local/bin/pytest
                    '''
                }
            }
        }

        stage('Docker Login & Build') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh '''
                        set -e
                        echo "[INFO] Logging into Docker Hub..."
                        echo $PASSWORD | docker login -u $USERNAME --password-stdin
                        echo "[INFO] Building Docker image..."
                        docker build -t $IMAGE_TAG ./04-docker
                        docker image ls
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh '''
                    set -e
                    echo "[INFO] Pushing Docker image to Docker Hub..."
                    docker push $IMAGE_TAG
                    docker logout
                '''
            }
        }

        stage('Deploy to PROD Cluster') {
            steps {
                sh '''
                    set -e
                    echo "[INFO] Switching to PROD Cluster..."
                    export KUBECONFIG=$KUBECONFIG
                    kubectl config use-context arn:aws:eks:eu-west-2:568645574857:cluster/prod
                    kubectl config current-context
                '''
            }
        }

        stage('Apply Kubernetes Manifests') {
            steps {
                sh '''
                    set -e
                    echo "[INFO] Applying Kubernetes Deployment and Service manifests..."
                    kubectl apply -f k8s/deployment.yaml
                    kubectl apply -f k8s/service.yaml
                '''
            }
        }

        stage('Update Deployment Image') {
            steps {
                sh '''
                    set -e
                    echo "[INFO] Updating Deployment with new Docker Image..."
                    kubectl set image deployment/flask-app flask-app=$IMAGE_TAG
                    echo "[INFO] Waiting for rollout to complete..."
                    kubectl rollout status deployment/flask-app --timeout=120s
                '''
            }
        }

        stage('Acceptance Test (k6)') {
            steps {
                script {
                    echo "[INFO] Resolving LoadBalancer endpoint for flask-app-service..."
                    def service = sh(
                        script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}'",
                        returnStdout: true
                    ).trim()
                    echo "üß™ Running k6 Acceptance Test on Service: ${service}"

                    def k6Result = sh(
                        script: "k6 run -e SERVICE=${service} acceptance-test.js",
                        returnStatus: true
                    )
                    if (k6Result != 0) {
                        error "‚ùå k6 Acceptance Tests Failed! Check performance metrics."
                    } else {
                        echo "‚úÖ k6 Acceptance Tests Passed!"
                    }
                }
            }
        }
    }
    post {
        always {
            echo "[INFO] Cleaning up temporary files if any..."
        }
        failure {
            echo "üö® Build Failed! Check logs for details."
        }
        success {
            echo "üéâ Build and Deployment Completed Successfully!"
        }
    }
}
