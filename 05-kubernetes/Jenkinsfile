pipeline {
    agent any

    environment {
        IMAGE_NAME = 'momousa1997/flask-app'
        IMAGE_TAG = "${IMAGE_NAME}:${env.BUILD_NUMBER}"
        PATH = "/var/lib/jenkins/.local/bin:$PATH"

        KUBECONFIG = credentials('kubeconfig-credentials-id')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-key')
    }

    stages {
        stage('Setup') {
            steps {
                dir('04-docker') {
                    sh '''
                        echo "Setting up Python environment"
                        pip install --user --upgrade pip
                        pip install --user -r requirements.txt
                    '''
                }
                sh '''
                    echo "Setting KUBECONFIG permissions"
                    ls -la $KUBECONFIG
                    chmod 644 $KUBECONFIG
                    ls -la $KUBECONFIG
                '''
            }
        }

        stage('Test') {
            steps {
                dir('04-docker') {
                    sh '~/.local/bin/pytest'
                }
            }
        }

        stage('Login to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh 'echo $PASSWORD | docker login -u $USERNAME --password-stdin'
                }
                echo 'Docker Hub login successful'
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('04-docker') {
                    sh '''
                        docker build -t $IMAGE_TAG .
                        docker image ls
                    '''
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                sh 'docker push $IMAGE_TAG'
                echo 'Docker image pushed successfully'
            }
        }
        
        stage('Acceptance Test') {
            steps {
                script {
                    def service = sh(
                        script: "kubectl get svc flask-app-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}:{.spec.ports[0].port}'",
                        returnStdout: true
                    ).trim()
                    echo "Service URL: ${service}"
                    sh "k6 run -e SERVICE=${service} acceptance-test.js"
                }
            }
        }

        stage('Deploy to Prod') {
            steps {
                sh '''
                    echo "Deploying to PROD cluster..."
                    kubectl config use-context arn:aws:eks:eu-west-2:568645574857:cluster/prod
                    kubectl config current-context
                    kubectl set image deployment/flask-app flask-app=$IMAGE_TAG
                '''
            }
        }
    }
}
